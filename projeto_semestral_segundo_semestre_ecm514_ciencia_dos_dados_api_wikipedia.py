# -*- coding: utf-8 -*-
"""Projeto Semestral - Segundo Semestre - ECM514 - Ciência dos Dados - API Wikipédia.ipynb

Automatically generated by Colab.


## Projeto Semestral - Segundo Semestre - ECM514 - Ciência dos Dados - API Wikipédia

Alunos:

Marcel Marques Caceres - RA: 17.00648-0

Kaique de Andrade Almeida - RA: 17.01113-2

Filipe dos Santos Pugliesi - RA: 18.02608-7

Johannes Mattheus Krouwel - RA: 20.01248-9
"""

# Obtenção de dados da Wikipédia

# https://en.wikipedia.org/w/api.php?action=query&prop=revisions&rvprop=content&format=xml&titles=Main%20Page

# Conexão ao Dropbox

!pip install dropbox requests

import dropbox

# ACCESS_TOKEN = 'SEU_TOKEN_DE_ACESSO_AQUI'  # Substitua pelo seu token de acesso
ACCESS_TOKEN = ''
dbx = dropbox.Dropbox(ACCESS_TOKEN)
print("Conexão com Dropbox estabelecida.")

# Função para enviar dados ao Dropbox

def upload_to_dropbox(file_path, data):
   """
   Faz o upload de um arquivo para o Dropbox.
   """
   try:
       dbx.files_upload(data.encode('utf-8'), file_path, mode=dropbox.files.WriteMode.overwrite)
       print(f"Arquivo '{file_path}' enviado com sucesso para o Dropbox.")
   except dropbox.exceptions.ApiError as e:
       print(f"Falha ao enviar '{file_path}' para o Dropbox: {e}")

# Lista com os títulos das páginas da Wikipédia


page_titles = [
               # Britânicos
                "Winston Churchill", "Isambard Kingdom Brunel", "Diana, Princess of Wales", "Charles Darwin",
                "William Shakespeare", "Isaac Newton", "Elizabeth I", "John Lennon",
                "Horatio Nelson, 1st Viscount Nelson", "Oliver Cromwell", "Ernest Shackleton", "James Cook",
                "Robert Baden-Powell, 1st Baron Baden-Powell", "Alfred the Great", "Arthur Wellesley, 1st Duke of Wellington", "Margaret Thatcher",
                "Michael Crawford", "Queen Victoria", "Paul McCartney", "Alexander Fleming",
                "Alan Turing", "Michael Faraday", "Owain Glyndŵr", "Elizabeth II",
                "Stephen Hawking", "William Tyndale", "Emmeline Pankhurst", "William Wilberforce",
                "David Bowie", "Guy Fawkes", "Leonard Cheshire", "Eric Morecambe",
                "David Beckham", "Thomas Paine", "Boudica", "Steve Redgrave",
                "Thomas More", "William Blake", "John Harrison", "Henry VIII",
                "Charles Dickens", "Frank Whittle", "John Peel", "John Logie Baird",
                "Aneurin Bevan", "Boy George", "Douglas Bader", "William Wallace",
                "Francis Drake", "John Wesley", "King Arthur", "Florence Nightingale",
                "T. E. Lawrence", "Robert Falcon Scott", "Enoch Powell", "Cliff Richard",
                "Alexander Graham Bell", "Freddie Mercury", "Julie Andrews", "Edward Elgar",
                "Queen Elizabeth The Queen Mother", "George Harrison", "David Attenborough", "James Connolly",
                "George Stephenson", "Charlie Chaplin", "Tony Blair", "William Caxton",
                "Bobby Moore", "Jane Austen", "William Booth", "Henry V of England",
                "Aleister Crowley", "Robert the Bruce", "Bob Geldof", "The Unknown Warrior",
                "Robbie Williams", "Edward Jenner", "David Lloyd George", "Charles Babbage",
                "Geoffrey Chaucer", "Richard III of England", "J. K. Rowling", "James Watt",
                "Richard Branson", "Bono", "John Lydon", "Bernard Montgomery",
                "Donald Campbell", "Henry II of England", "James Clerk Maxwell", "J. R. R. Tolkien",
                "Walter Raleigh", "Edward I of England", "Barnes Wallis", "Richard Burton",
                "Tony Benn", "David Livingstone", "Tim Berners-Lee", "Marie Stopes",

               # Alemães
                "Konrad Adenauer", "Martin Luther", "Karl Marx", "Sophie Scholl and Hans Scholl",
                "Willy Brandt", "Johann Sebastian Bach", "Johann Wolfgang von Goethe", "Johannes Gutenberg",
                "Otto von Bismarck", "Albert Einstein", "Adolph Kolping", "Ludwig van Beethoven",
                "Helmut Kohl", "Robert Bosch", "Daniel Küblböck", "Konrad Zuse", "Joseph Kentenich",
                "Albert Schweitzer", "Karlheinz Böhm", "Wolfgang Amadeus Mozart", "Helmut Schmidt",
                "Regine Hildebrandt", "Alice Schwarzer", "Thomas Gottschalk", "Herbert Grönemeyer",
                "Michael Schumacher", "Ludwig Erhard", "Wilhelm Röntgen", "Günther Jauch",
                "Dieter Bohlen", "Jan Ullrich", "Steffi Graf", "Samuel Hahnemann", "Dietrich Bonhoeffer",
                "Boris Becker", "Franz Beckenbauer", "Oskar Schindler", "Nena", "Hans-Dietrich Genscher",
                "Heinz Rühmann", "Harald Schmidt", "Frederick the Great", "Immanuel Kant",
                "Patrick Lindner", "Hildegard of Bingen", "Heino", "Richard von Weizsäcker",
                "Claus von Stauffenberg", "Marlene Dietrich", "Robert Koch", "Joschka Fischer",
                "Karl May", "Loriot", "Albertus Magnus", "Rudi Völler", "Heinz Erhardt",
                "Roy Black", "Heinz-Harald Frentzen", "Alexander von Humboldt", "Peter Kraus",
                "Wernher von Braun", "Dirk Nowitzki", "Campino", "Franz Josef Strauss", "Sebastian Kneipp",
                "Friedrich Schiller", "Richard Wagner", "Katarina Witt", "Fritz Walter", "Nicole",
                "Friedrich von Bodelschwingh", "Otto Lilienthal", "Marion Dönhoff", "Thomas Mann",
                "Hermann Hesse", "Romy Schneider", "Sven Hannawald", "Empress Elisabeth of Austria",
                "Willy Millowitsch", "Gerhard Schröder", "Joseph Beuys", "Friedrich Nietzsche", "Rudi Dutschke",
                "Karl Lehmann", "Beate Uhse-Rotermund", "Trümmerfrau", "Carl Friedrich Gauss", "Helmut Rahn",
                "Albrecht Dürer", "Max Schmeling", "Carl Benz", "Frederick II, Holy Roman Emperor", "Reinhard Mey", "Heinrich Heine",
                "Georg Elser", "Konrad Duden", "James Last", "Uwe Seeler",
                "Erich Gutenberg", "Emanuel Lasker", "Rudolf Steiner", "Edith Stein", "Farin Urlaub",
                "Xavier Naidoo", "Nicolaus Copernicus", "Adam Ries", "Gottlieb Daimler", "Erich Kästner",
                "Rosa Luxemburg", "Bertolt Brecht", "Theodor Heuss", "Otto the Great", "Sigmund Freud",
                "Wilhelm Busch", "Hildegard Hamm-Brücher", "Udo Lindenberg", "Eugen Drewermann", "Ferdinand Sauerbruch",
                "Peter Maffay", "Josef Frings", "Silke Fritzen", "Max Planck", "Johannes Rau",
                "Brothers Grimm", "Baron Munchausen", "Wilhelm II", "Rudolf Augstein",
                "Heinrich Böll", "Ralf Schumacher", "Anne Frank", "Frederick Barbarossa", "Sigmund Jähn",
                "Franziska van Almsick", "Clemens August Graf von Galen", "Ludwig II of Bavaria", "Carl Friedrich Zeiss",
                "Hildegard Knef", "Levi Strauss", "Sepp Herberger", "Klaus Kinski", "Werner von Siemens",
                "Ferdinand Porsche", "Peter Scholl-Latour", "August Heinrich Hoffmann von Fallersleben",
                "Siegfried & Roy", "Christoph Langen", "Michelle", "Manfred von Ardenne", "Gottfried Wilhelm Leibniz",
                "Arthur Schopenhauer", "Kurt Tucholsky", "Karl and Theo Albrecht", "Pope Benedict XVI",
                "Werner Heisenberg", "Harald Juhnke", "Till Eulenspiegel", "Götz George", "Rudolf Diesel",
                "Stefan Raab", "Hans Albers", "Nina Hagen", "Johannes Kepler", "Hans Rosenthal",
                "Rupert Neudeck", "Dieter Hildebrandt",
                "Hans Söllner", "Gregor Gysi", "Arminius", "Günter Grass", "Inge Meysel",
                "Hans Hartz", "Karl Lagerfeld", "Oliver Kahn", "Gerd Müller", "Ferdinand von Zeppelin",
                "Nicolaus Otto", "Clara Zetkin", "Hannah Arendt", "Roman Herzog",
                "Hermann Oberth", "Karl Valentin", "Frank Schöbel", "Jakob Fugger", "Henry Maske",
                "Helmut Zacharias", "Michael Ballack", "Bernhard Grzimek", "Richard Strauss", "Edmund Stoiber",
                "Klaus Störtebeker", "Peter Frankenfeld", "Mildred Scheel", "Claudia Schiffer",

               # Franceses
                "Charles De Gaulle", "Luís Pasteur", "Abade Pierre", "Marie Curie",
                "Coluche", "Victor Hugo", "Bourvil", "Molière", "Jacques Cousteau",
                "Édith Piaf", "Marcel Pagnol", "Georges Brassens", "Fernandel", "Jean de La Fontaine",
                "Jules Verne", "Napoleon", "Louis de Funès", "Jean Gabin",
                "Daniel Balavoine", "Serge Gainsbourg", "Zinedine Zidane", "Carlos Magno",
                "Lino Ventura", "François Mitterrand", "Gustave Eiffel", "Émile Zola",
                "Emmanuelle Cinquin", "Jean Moulin", "Charles Aznavour", "Yves Montand",
                "Joan of Arc", "Philippe Leclerc de Hauteclocque", "Voltaire", "Johnny Hallyday",
                "Antoine de Saint-Exupéry", "Claude François", "Christian Cabrol", "Jean-Paul Belmondo",
                "Jules Ferry", "Louis Lumière", "Michel Platini", "Jacques Chirac",
                "Charles Trenet", "Georges Pompidou", "Michel Sardou", "Simone Signoret",
                "Haroun Tazieff", "Jacques Prévert", "Éric Tabarly", "Louis XIV",
                "David Douillet", "Henri Salvador", "Jean-Jacques Goldman", "Jean Jaurès",
                "Jean Marais", "Yannick Noah", "Albert Camus", "Dalida", "Léon Zitrone",
                "Nicolas Hulot", "Simone Veil", "Alain Delon", "Patrick Poivre d'Arvor",
                "Aimé Jacquet", "Francis Cabrel", "Brigitte Bardot", "Guy de Maupassant",
                "Alexandre Dumas", "Honoré de Balzac", "Paul Verlaine",
                "Jean-Jacques Rousseau", "Maximilien Robespierre", "Renaud",
                "Bernard Kouchner", "Claude Monet", "Michel Serrault", "Pierre-Auguste Renoir",
                "Michel Drucker", "Raimu", "Vercingetorix", "Raymond Poulidor",
                "Charles Baudelaire", "Pierre Corneille", "Arthur Rimbaud", "Georges Clemenceau",
                "Gilbert Bécaud", "José Bové", "Jean Ferrat", "Lionel Jospin",
                "Jean Cocteau", "Luc Besson", "Tino Rossi", "Pierre de Coubertin",
                "Jean Renoir", "Gérard Philipe", "Jean-Paul Sartre", "Catherine Deneuve",
                "Serge Reggiani", "Gérard Depardieu", "Françoise Dolto", "René Descartes",
                "Blaise Pascal",

               # Americanos
                "Muhammad Ali", "Maya Angelou", "Susan B. Anthony", "Lance Armstrong", "Neil Armstrong",
                "Lucille Ball", "Barbara Bush", "George H. W. Bush", "George W. Bush",
                "Laura Bush", "Andrew Carnegie", "Johnny Carson", "Jimmy Carter", "George Washington Carver",
                "Ray Charles", "Cesar Chavez", "Bill Clinton", "Hillary Clinton", "Bill Cosby",
                "Tom Cruise", "Ellen DeGeneres", "Walt Disney", "Frederick Douglass", "Amelia Earhart",
                "Clint Eastwood", "Thomas Edison", "John Edwards", "Dwight D. Eisenhower",
                "Brett Favre", "Henry Ford", "Benjamin Franklin", "Bill Gates", "Mel Gibson",
                "Rudy Giuliani", "John Glenn", "Billy Graham", "Alexander Hamilton", "Tom Hanks",
                "Hugh Hefner", "Katharine Hepburn", "Bob Hope", "Howard Hughes", "Michael Jackson",
                "Thomas Jefferson", "Steve Jobs", "Lyndon B. Johnson", "Michael Jordan", "Helen Keller",
                "Jacqueline Kennedy Onassis", "John F. Kennedy", "Robert F. Kennedy", "Martin Luther King Jr.",
                "Rush Limbaugh", "Abraham Lincoln", "Charles Lindbergh", "George Lucas", "Madonna",
                "Malcolm X", "Phil McGraw", "Marilyn Monroe", "Michael Moore", "Audie Murphy",
                "Richard Nixon", "Barack Obama", "Jesse Owens", "Rosa Parks", "George S. Patton",
                "Colin Powell", "Elvis Presley", "Ronald Reagan", "Christopher Reeve", "Condoleezza Rice",
                "Jackie Robinson", "Eleanor Roosevelt", "Franklin D. Roosevelt", "Theodore Roosevelt",
                "Babe Ruth", "Carl Sagan", "Jonas Salk", "Arnold Schwarzenegger", "Frank Sinatra",
                "Joseph Smith", "Steven Spielberg", "James Stewart", "Martha Stewart", "Nikola Tesla",
                "Pat Tillman", "Harry S. Truman", "Donald Trump", "Harriet Tubman", "Mark Twain",
                "Sam Walton", "George Washington", "John Wayne", "Oprah Winfrey", "Tiger Woods",
                "Wright brothers", "Chuck Yeager",

               # Portugueses
                "António de Oliveira Salazar", "Álvaro Cunhal", "Aristides de Sousa Mendes", "Afonso I of Portugal",
                "Luís de Camões", "John II of Portugal", "Prince Henry the Navigator", "Fernando Pessoa",
                "Sebastião José de Carvalho e Melo, 1st Marquis of Pombal", "Vasco da Gama", "Salgueiro Maia",
                "Mário Soares", "Anthony of Padua", "Amália Rodrigues", "Eusébio", "Francisco Sá Carneiro",
                "Jorge Nuno Pinto da Costa", "Nuno Álvares Pereira", "João Ferreira de Almeida", "José Mourinho",
                "Agostinho da Silva", "Eça de Queiroz", "António Egas Moniz", "Denis of Portugal", "Fernando Nobre",
                "José Hermano Saraiva", "Aníbal Cavaco Silva", "Humberto Delgado", "José Afonso", "Luís Figo",
                "Marcelo Caetano", "Pedro Nunes", "António Vieira", "Florbela Espanca", "Ferdinand Magellan",
                "Maria de Lourdes Pintasilgo", "John I of Portugal", "Sophia de Mello Breyner Andresen", "Antonia Ferreira",
                "Antonio Damasio", "Afonso de Albuquerque", "Manuel I of Portugal", "José Saramago", "Elizabeth of Portugal",
                "Catarina Eufémia", "Carlos Paredes", "José Sócrates", "Pedro Álvares Cabral", "Ruy de Carvalho",
                "Brites de Almeida, The Baker of Aljubarrota", "Alberto João Jardim", "Almada Negreiros", "Vasco Gonçalves",
                "Álvaro Siza Vieira", "Belmiro de Azevedo", "José Tomás de Sousa Martins", "Maria do Carmo Seabra", "Carlos I of Portugal",
                "Mariza", "Eleanor of Portugal", "Rosa Mota", "Afonso III of Portugal", "Vítor Baía", "Bartolomeu Dias",
                "Otelo Saraiva de Carvalho", "Cristiano Ronaldo", "Herman José", "Maria II of Portugal", "Carlos Lopes",
                "Afonso Costa", "Fontes Pereira de Melo", "Gago Coutinho", "Ricardo Araújo Pereira", "Bocage",
                "Hélio Pestana", "Jorge Sampaio", "António Champalimaud", "António Lobo Antunes", "Gil Vicente",
                "Maria Helena Vieira da Silva", "Miguel Torga", "Natália Correia", "Edgar Cardoso", "Fernão Mendes Pinto",
                "Sister Lúcia", "Pope John XXI", "Damião de Góis", "John IV of Portugal", "Joaquim Agostinho", "Adelaide Cabete",
                "Almeida Garrett", "António Variações", "Paula Rego", "Maria João Pires",

               # Argentinos
                "José de San Martín", "René Favaloro", "Juan Manuel Fangio", "Alberto Olmedo",
                "Che Guevara", "Diego Maradona", "Eva Perón", "Jorge Luis Borges", "Manuel Belgrano",
                "Roberto Fontanarrosa", "Adolfo Bioy Casares", "Adolfo Pérez Esquivel", "Alfonsina Storni",
                "Alfredo Alcón", "Alfredo Di Stéfano", "Alfredo Palacios", "Alicia Moreau de Justo",
                "Ángel Vicente Peñaloza", "Antonio Berni", "Arturo Frondizi", "Arturo Umberto Illia",
                "Astor Piazzolla", "Atahualpa Yupanqui", "Bartolomé Mitre", "Benito Quinquela Martín",
                "Bernardino Rivadavia", "Bernardo Houssay", "Calfucurá", "Carlos Bilardo", "Carlos Gardel",
                "Carlos Menem", "Carlos Monzón", "Carlos Mugica", "Carlos Reutemann", "Charly García",
                "César Luis Menotti", "César Milstein", "Daniel Passarella", "Domingo Faustino Sarmiento",
                "Enrique Angelelli", "Enrique Santos Discépolo", "Ernesto Sabato", "Esteban Echeverría",
                "Estela de Carlotto", "Facundo Quiroga", "Florentino Ameghino", "Francisco Moreno",
                "Gabriel Batistuta", "Gabriela Sabatini", "Guillermo Vilas", "Gustavo Santaolalla",
                "Hebe de Bonafini", "Hipólito Yrigoyen", "Hugo Porta", "Jorge Newbery", "José Hernández",
                "José María Gatica", "Juan Bautista Alberdi", "Juan José Castelli", "Juan Manuel de Rosas",
                "Juan Perón", "Juana Azurduy de Padilla", "Julio Argentino Roca", "Julio Bocca",
                "Julio Cortázar", "Justo José de Urquiza", "Leandro N. Alem", "León Gieco",
                "Lisandro de la Torre", "Lola Mora", "Luciana Aymar", "Luis Federico Leloir", "Luis Sandrini",
                "Manu Ginóbili", "Manuel Dorrego", "Mariano Moreno", "Mariano Mores", "Mario Kempes",
                "Mariquita Sánchez", "Martín Miguel de Güemes", "María Elena Walsh", "Mercedes Sosa",
                "Nicolino Locche", "Niní Marshall", "Norma Aleandro", "Néstor Kirchner", "Oscar Bonavena",
                "Quino", "Ramón Carrillo", "Raúl Alfonsín", "Ricardo Balbín", "Roberto Arlt", "Roberto De Vicenzo",
                "Rodolfo Walsh", "Roque Sáenz Peña", "Salvador Mazza", "Sandro de América", "Tato Bores",
                "Tita Merello", "Xul Solar",

               # Italianos
                "Lucio Battisti", "Roberto Benigni", "Mike Bongiorno", "Caravaggio", "Giosuè Carducci", "Christopher Columbus",
                "Fausto Coppi", "Dante Alighieri", "Leonardo da Vinci", "Eduardo De Filippo", "Vittorio De Sica", "Falcone", "Borsellino",
                "Federico Fellini", "Enrico Fermi", "Chiara Ferragni", "Enzo Ferrari", "Rosario Fiorello", "Galileo Galilei",
                "Giuseppe Garibaldi", "Vittorio Gassman", "Giotto", "Giacomo Leopardi", "Rita Levi-Montalcini", "Sophia Loren",
                "Anna Magnani", "Nino Manfredi", "Alessandro Manzoni", "Guglielmo Marconi", "Marcello Mastroianni", "Giuseppe Mazzini",
                "Michelangelo", "Mina", "Aldo Moro", "Giovanni Pascoli", "Laura Pausini", "Luciano Pavarotti", "Sandro Pertini",
                "Petrarch", "Luigi Pirandello", "Marco Polo", "Giacomo Puccini", "Valentino Rossi", "Alberto Sordi",
                "Totò", "Massimo Troisi", "Giuseppe Verdi", "Alessandro Volta",

               # Brasileiros
                "Ayrton Senna", "Chico Xavier", "Fernando Henrique Cardoso", "Getúlio Vargas", "Irmã Dulce",
                "Juscelino Kubitschek", "Luiz Inácio Lula da Silva", "Oscar Niemeyer", "Pelé", "Isabel, Princess Imperial of Brazil",
                "Alberto Santos-Dumont", "Tiradentes", "Edir Macedo", "Chico Anysio", "Ronaldo (Brazilian footballer)", "Dercy Gonçalves", "Zilda Arns",
                "Roberto Carlos (singer)", "José Alencar", "Neymar", "Eike Batista", "Ruy Barbosa",
                "Frei Galvão", "Manoel Jacintho Coelho", "Oswaldo Cruz", "Silas Malafaia", "Pedro II of Brazil",
                "Chico Mendes", "Luiz Gonzaga", "Renato Russo", "Herbert de Souza", "Padre Cícero",
                "Dilma Rousseff", "Tancredo Neves", "Luciano Huck", "Valdemiro Santiago", "Hélder Câmara",
                "Renato Aragão", "Rodrigo Faro", "Xuxa", "Machado de Assis", "Luan Santana",
                "Ivete Sangalo", "Elis Regina", "Irineu Evangelista de Sousa, Viscount of Mauá", "Raul Seixas", "Leonel Brizola",
                "Tiririca", "Gugu Liberato", "Rogério Ceni", "Carlos Drummond de Andrade",
                "Zumbi", "R.R. Soares", "Paulo Freire", "Hebe Camargo", "Monteiro Lobato",
                "Roberto Marinho", "Marcos (footballer, born 1973)", "Marcelo Rossi", "Zico (footballer)", "Amácio Mazzaropi",
                "Dedé (footballer, born 1988)", "Ulysses Guimarães", "Reynaldo Gianecchini", "Carlos Chagas", "Jonas Abib",
                "Luís Alves de Lima e Silva, Duke of Caxias", "Antônio Ermírio de Moraes", "Cândido Rondon", "Lua Blanco", "Michel Teló",
                "Garrincha", "Lampião", "Claudia Leitte", "Luís Carlos Prestes", "Marcos Pontes",
                "Fernando Collor de Mello", "José Serra", "Sócrates", "Datena", "Ronaldinho",
                "Joelma (singer)", "Chico Buarque", "Chacrinha", "Amado Batista", "William Bonner (newscaster)",
                "Cazuza", "Antônio Carlos Jobim", "Anderson Silva", "Roberto Landell de Moura", "Romário",
                "Jorge Amado", "Ronald Golias", "Itamar Franco", "Roberto Justus", "Ana Paula Valadão",
                "Vital Brazil", "Jô Soares", "Maria da Penha"

               ]

len(page_titles)

import requests

def get_wikipedia_page_content(page_title):
    """
    Extrai o conteúdo da página da Wikipédia pelo título da página.
    """
    url = "https://en.wikipedia.org/w/api.php"

    params = {
        'action': 'query',
        'format': 'json',
        'prop': 'extracts',
        'explaintext': True,
        'titles': page_title
    }

    response = requests.get(url, params=params)

    if response.status_code == 200:
        data = response.json()
        page = next(iter(data['query']['pages'].values()))
        content = page.get('extract', 'No content found')
        return content
    else:
        print(f"Erro ao acessar a API da Wikipedia para '{page_title}'. Status code: {response.status_code}")
        return None

# # Usar esse código só uma vez, para baixar as páginas.
# # Por segurança, descomente só quando for utilizar.

# def get_contents_from_page_list(page_titles):
#     """
#     Extrai o conteúdo de uma lista de páginas da Wikipédia e salva cada conteúdo no Dropbox.
#     """
#     for title in page_titles:
#         print(f"Extraindo conteúdo para: {title}")
#         content = get_wikipedia_page_content(title)
#         if content:
#             # Define o caminho do arquivo no Dropbox
#             safe_title = title.replace(' ', '_')
#             file_path = f"/wikipedia-api-biografias/{safe_title}.txt"

#             # Faz o upload do conteúdo para o Dropbox
#             upload_to_dropbox(file_path, content)
#         else:
#             print(f"Conteúdo para '{title}' não encontrado.")


# # Função para execução da extração e upload
# get_contents_from_page_list(page_titles)

# # Contar número de páginas
# len(page_titles)

import dropbox

# Listar diretórios no nível raiz
try:
    res = dbx.files_list_folder(path="")
    for entry in res.entries:
        print(entry.name)
except dropbox.exceptions.ApiError as e:
    print("Erro ao acessar a pasta raiz:", e)

# Carregamento dos arquivos para o processamento dos dados

import dropbox

def carregar_textos_em_ordem(page_titles, caminho_dropbox):
    """
    Carrega textos do Dropbox na mesma ordem de `page_titles`.
    """
    try:
        textos = []

        for titulo in page_titles:
            # Converte o título para o nome seguro do arquivo no Dropbox
            safe_title = titulo.replace(' ', '_') + ".txt"
            arquivo_path = f"{caminho_dropbox}/{safe_title}"

            try:
                # Baixa o arquivo e adiciona o conteúdo à lista
                _, res = dbx.files_download(arquivo_path)
                textos.append(res.content.decode("utf-8"))
            except dropbox.exceptions.ApiError as e:
                print(f"Erro ao baixar '{safe_title}': {e}")
                textos.append(None)  # Caso ocorra um erro, insere um marcador

        return textos

    except dropbox.exceptions.ApiError as e:
        print(f"Erro ao acessar o diretório '{caminho_dropbox}': {e}")
        return []

# Substituir caminho pelo seu diretório no Dropbox
caminho_dropbox = '/wikipedia-api-biografias'

# Carregar textos
textos = carregar_textos_em_ordem(page_titles, caminho_dropbox)

# Exibe o início do primeiro arquivo carregado
primeiro_arquivo = textos[0]  # Obtém o conteúdo do primeiro arquivo
print("Primeiro trecho do primeiro arquivo:\n")
print(primeiro_arquivo[:500])  # Exibe os primeiros 500 caracteres

# Exibe o início do último arquivo carregado
ultimo_arquivo = textos[-1]  # Obtém o conteúdo do último arquivo
print("Primeiro trecho do último arquivo:\n")
print(ultimo_arquivo[:500])  # Exibe os primeiros 500 caracteres

# Teste para confirmar a correspondência para todos os títulos e textos
for i, (titulo, texto) in enumerate(zip(page_titles, textos)):
    print(f"Índice: {i}")
    print(f"Título: {titulo}")
    print(f"Texto: {texto[:50] if texto else 'Texto não encontrado'}...\n")

# Dicionário para associar as personalidades a suas respectivas áreas
area_mapping = {

    # Britânicos
    "Winston Churchill": ["Politics", "Military", "Literature", "Prime Minister", "History"],
    "Isambard Kingdom Brunel": ["Engineering", "Architecture", "Invention"],
    "Diana, Princess of Wales": ["Royalty", "Philanthropy"],
    "Charles Darwin": ["Biology", "Geology"],
    "William Shakespeare": ["Literature", "Performing Arts"],
    "Isaac Newton": ["Physics", "Mathematics", "Astronomy", "Philosophy"],
    "Elizabeth I": ["Royalty", "Politics"],
    "John Lennon": ["Music", "Literature", "Activism"],
    "Horatio Nelson, 1st Viscount Nelson": "Military",
    "Oliver Cromwell": ["Politics", "Military"],
    "Ernest Shackleton": ["Exploration", "Navigation"],
    "James Cook": ["Exploration", "Navigation"],
    "Robert Baden-Powell, 1st Baron Baden-Powell": "Military",
    "Alfred the Great": ["Royalty", "Politics"],
    "Arthur Wellesley, 1st Duke of Wellington": ["Politics", "Military", "Prime Minister"],
    "Margaret Thatcher": ["Politics", "Prime Minister"],
    "Michael Crawford": ["Music", "Performing Arts"],
    "Queen Victoria": ["Royalty", "Politics"],
    "Paul McCartney": ["Music", "Activism"],
    "Alexander Fleming": ["Biology", "Medicine"],
    "Alan Turing": ["Mathematics", "Computer Science"],
    "Michael Faraday": ["Physics", "Chemistry"],
    "Owain Glyndŵr": ["Royalty", "Politics"],
    "Elizabeth II": ["Royalty", "Politics"],
    "Stephen Hawking": "Physics",
    "William Tyndale": "Religion",
    "Emmeline Pankhurst": ["Politics", "Activism"],
    "William Wilberforce": ["Politics", "Philanthropy"],
    "David Bowie": ["Music", "Performing Arts"],
    "Guy Fawkes": "Politics",
    "Leonard Cheshire": ["Military", "Philanthropy"],
    "Eric Morecambe": "Comedy",
    "David Beckham": "Football",
    "Thomas Paine": "Politics",
    "Boudica": ["Royalty", "Politics"],
    "Steve Redgrave": "Rowing",
    "Thomas More": ["Religion", "Politics", "Diplomacy"],
    "William Blake": ["Literature", "Visual Arts"],
    "John Harrison": "Invention",
    "Henry VIII": ["Royalty", "Politics", "Religion"],
    "Charles Dickens": "Literature",
    "Frank Whittle": ["Engineering", "Invention"],
    "John Peel": ["Radio", "Music", "Journalism"],
    "John Logie Baird": ["Engineering", "Invention"],
    "Aneurin Bevan": "Politics",
    "Boy George": "Music",
    "Douglas Bader": "Military",
    "William Wallace": "Military",
    "Francis Drake": ["Exploration", "Navigation", "Politics"],
    "John Wesley": "Religion",
    "King Arthur": ["Royalty", "Legend"],
    "Florence Nightingale": "Nursing",
    "T. E. Lawrence": ["Exploration", "Politics", "Literature", "Diplomacy"],
    "Robert Falcon Scott": ["Exploration", "Navigation"],
    "Enoch Powell": ["Politics", "Military", "Literature"],
    "Cliff Richard": "Music",
    "Alexander Graham Bell": ["Invention", "Entrepreneurship"],
    "Freddie Mercury": "Music",
    "Julie Andrews": ["Music", "Performing Arts"],
    "Edward Elgar": "Music",
    "Queen Elizabeth The Queen Mother": "Royalty",
    "George Harrison": "Music",
    "David Attenborough": ["Radio", "Science"],
    "James Connolly": "Politics",
    "George Stephenson": ["Engineering", "Invention"],
    "Charlie Chaplin": "Comedy",
    "Tony Blair": ["Politics", "Prime Minister"],
    "William Caxton": ["Commerce", "Literature", "Visual Arts", "Diplomacy"],
    "Bobby Moore": "Football",
    "Jane Austen": "Literature",
    "William Booth": ["Religion", "Philanthropy"],
    "Henry V of England": ["Royalty", "Politics"],
    "Aleister Crowley": ["Occultism", "Literature"],
    "Robert the Bruce": ["Royalty", "Politics"],
    "Bob Geldof": "Music",
    "The Unknown Warrior": "Military",
    "Robbie Williams": "Music",
    "Edward Jenner": ["Biology", "Medicine"],
    "David Lloyd George": ["Politics", "Prime Minister"],
    "Charles Babbage": ["Mathematics", "Computer Science", "Engineering", "Invention"],
    "Geoffrey Chaucer": ["Literature", "Philosophy", "Diplomacy"],
    "Richard III of England": ["Royalty", "Politics"],
    "J. K. Rowling": "Literature",
    "James Watt": ["Invention", "Mathematics", "Engineering"],
    "Richard Branson": "Entrepreneurship",
    "Bono": ["Music", "Philanthropy", "Activism"],
    "John Lydon": ["Music", "Television"],
    "Bernard Montgomery": "Military",
    "Donald Campbell": "Speed",
    "Henry II of England": ["Royalty", "Politics"],
    "James Clerk Maxwell": ["Physics", "Mathematics"],
    "J. R. R. Tolkien": "Literature",
    "Walter Raleigh": ["Exploration", "Navigation"],
    "Edward I of England": ["Royalty", "Politics"],
    "Barnes Wallis": ["Engineering", "Invention"],
    "Richard Burton": "Performing Arts",
    "Tony Benn": "Politics",
    "David Livingstone": "Exploration",
    "Tim Berners-Lee": ["Physics", "Computer Science", "Invention"],
    "Marie Stopes": ["Literature", "Biology", "Activism"],

    # Alemães
    "Konrad Adenauer": ["Politics", "Chancellor"],
    "Martin Luther": "Religion",
    "Karl Marx": ["Philosophy", "Sociology", "Economics", "History"],
    "Sophie Scholl and Hans Scholl": "Activism",
    "Willy Brandt": ["Politics", "Chancellor"],
    "Johann Sebastian Bach": "Music",
    "Johann Wolfgang von Goethe": ["Literature", "Philosophy"],
    "Johannes Gutenberg": "Invention",
    "Otto von Bismarck": ["Politics", "Chancellor"],
    "Albert Einstein": "Physics",
    "Adolph Kolping": "Religion",
    "Ludwig van Beethoven": "Music",
    "Helmut Kohl": ["Politics", "Chancellor"],
    "Robert Bosch": ["Industry", "Invention"],
    "Daniel Küblböck": ["Music", "Performing Arts"],
    "Konrad Zuse": ["Engineering", "Invention", "Computer Science"],
    "Joseph Kentenich": "Religion",
    "Albert Schweitzer": ["Physics", "Philanthropy"],
    "Karlheinz Böhm": ["Performing Arts", "Activism"],
    "Wolfgang Amadeus Mozart": "Music",
    "Helmut Schmidt": ["Politics", "Chancellor"],
    "Regine Hildebrandt": "Politics",
    "Alice Schwarzer": ["Journalism", "Literature", "Activism"],
    "Thomas Gottschalk": "Television",
    "Herbert Grönemeyer": "Music",
    "Michael Schumacher": "Motorsport",
    "Ludwig Erhard": ["Politics", "Chancellor"],
    "Wilhelm Röntgen": ["Physics", "Engineering"],
    "Günther Jauch": ["Journalism", "Radio", "Television"],
    "Dieter Bohlen": ["Music", "Television"],
    "Jan Ullrich": "Cycling",
    "Steffi Graf": "Tennis",
    "Samuel Hahnemann": "Medicine",
    "Dietrich Bonhoeffer": ["Religion", "Philosophy", "Activism"],
    "Boris Becker": "Tennis",
    "Franz Beckenbauer": "Football",
    "Oskar Schindler": ["Humanitarianism", "Activism"],
    "Nena": ["Music", "Performing Arts"],
    "Hans-Dietrich Genscher": "Politics",
    "Heinz Rühmann": "Performing Arts",
    "Harald Schmidt": "Comedy",
    "Frederick the Great": ["Royalty", "Politics"],
    "Immanuel Kant": "Philosophy",
    "Patrick Lindner": "Music",
    "Hildegard of Bingen": ["Religion", "Music", "Literature"],
    "Heino": "Music",
    "Richard von Weizsäcker": ["Politics", "President"],
    "Claus von Stauffenberg": ["Military", "Activism"],
    "Marlene Dietrich": ["Performing Arts", "Music"],
    "Robert Koch": ["Biology", "Medicine"],
    "Joschka Fischer": ["Politics", "Vice-Chancellor"],
    "Karl May": "Literature",
    "Loriot": "Comedy",
    "Albertus Magnus": ["Religion", "Philosophy", "Literature"],
    "Rudi Völler": "Football",
    "Heinz Erhardt": ["Comedy", "Music", "Performing Arts", "Literature"],
    "Roy Black": ["Music", "Performing Arts"],  # Roy Black (Singer)
    "Heinz-Harald Frentzen": "Motorsport",
    "Alexander von Humboldt": ["Geology", "Philosophy", "Exploration"],
    "Peter Kraus": ["Music", "Performing Arts"],
    "Wernher von Braun": ["Engineering", "Astronomy", "Invention"],
    "Dirk Nowitzki": "Basketball",
    "Campino": "Music",
    "Franz Josef Strauss": "Politics",
    "Sebastian Kneipp": ["Religion", "Medicine"],
    "Friedrich Schiller": ["Literature", "Medicine", "Philosophy", "History"],
    "Richard Wagner": ["Music", "Performing Arts"],
    "Katarina Witt": "Figure Skating",
    "Fritz Walter": "Football",
    "Nicole": "Music",
    "Friedrich von Bodelschwingh": ["Religion", "Activism"],
    "Otto Lilienthal": "Aviation",
    "Marion Dönhoff": "Journalism",
    "Thomas Mann": "Literature",
    "Hermann Hesse": "Literature",
    "Romy Schneider": "Performing Arts",
    "Sven Hannawald": "Ski Jumping",
    "Empress Elisabeth of Austria": "Royalty",
    "Willy Millowitsch": ["Performing Arts", "Comedy"],
    "Gerhard Schröder": ["Politics", "Chancellor"],
    "Joseph Beuys": "Visual Arts",
    "Friedrich Nietzsche": ["Philosophy", "Literature"],
    "Rudi Dutschke": ["Sociology", "Politics", "Activism"],
    "Karl Lehmann": "Religion",
    "Beate Uhse-Rotermund": "Entrepreneurship",
    "Trümmerfrau": "German Reconstruction",
    "Carl Friedrich Gauss": ["Mathematics", "Astronomy", "Physics"],
    "Helmut Rahn": "Football",
    "Albrecht Dürer": "Visual Arts",
    "Max Schmeling": "Boxing",
    "Carl Benz": ["Engineering", "Invention", "Entrepreneurship"],
    "Frederick II, Holy Roman Emperor": ["Royalty", "Politics"],
    "Reinhard Mey": "Music",
    "Heinrich Heine": "Literature",
    "Georg Elser": "Activism",
    "Konrad Duden": ["Linguistics", "Literature"],
    "James Last": "Music",
    "Uwe Seeler": "Football",
    "Erich Gutenberg": "Economics",
    "Emanuel Lasker": "Chess",
    "Rudolf Steiner": ["Education", "Philosophy"],
    "Edith Stein": ["Religion", "Philosophy"],
    "Farin Urlaub": "Music",
    "Xavier Naidoo": "Music",
    "Nicolaus Copernicus": ["Religion", "Astronomy", "Mathematics"],
    "Adam Ries": "Mathematics",
    "Gottlieb Daimler": ["Engineering", "Invention", "Entrepreneurship"],
    "Erich Kästner": ["Literature", "Journalism"],
    "Rosa Luxemburg": ["Politics", "Philosophy", "Economics", "Activism"],
    "Bertolt Brecht": ["Literature", "Performing Arts"],
    "Theodor Heuss": ["Politics", "Journalism"],
    "Otto the Great": ["Royalty", "Politics"],
    "Sigmund Freud": ["Medicine", "Psychoanalysis"],
    "Wilhelm Busch": ["Literature", "Visual Arts"],
    "Hildegard Hamm-Brücher": "Politics",
    "Udo Lindenberg": "Music",
    "Eugen Drewermann": ["Theology", "Religion", "Activism"],
    "Ferdinand Sauerbruch": "Medicine",
    "Peter Maffay": "Music",
    "Josef Frings": "Religion",
    "Silke Fritzen": "Politics",
    "Max Planck": "Physics",
    "Johannes Rau": ["Politics", "President"],
    "Brothers Grimm": "Literature",
    "Baron Munchausen": ["Literature", "Character"],
    "Wilhelm II": ["Royalty", "Politics"],
    "Rudolf Augstein": ["Journalism", "Politics"],
    "Heinrich Böll": "Literature",
    "Ralf Schumacher": "Motorsport",
    "Anne Frank": "Literature",
    "Frederick Barbarossa": ["Royalty", "Politics"],
    "Sigmund Jähn": ["Exploration", "Military", "Astronautics"],
    "Franziska van Almsick": "Swimming",
    "Clemens August Graf von Galen": ["Religion", "Theology", "Activism"],
    "Ludwig II of Bavaria": ["Royalty", "Politics"],
    "Carl Friedrich Zeiss": ["Optics", "Physics", "Invention", "Entrepreneurship"],
    "Hildegard Knef": ["Music", "Performing Arts"],
    "Levi Strauss": ["Entrepreneurship", "Invention", "Fashion"],
    "Sepp Herberger": "Football",
    "Klaus Kinski": "Performing Arts",
    "Werner von Siemens": ["Industry", "Entrepreneurship", "Engineering", "Physics", "Invention"],
    "Ferdinand Porsche": ["Motorsport", "Industry", "Entrepreneurship"],
    "Peter Scholl-Latour": "Journalism",
    "August Heinrich Hoffmann von Fallersleben": ["Literature", "Music"],
    "Siegfried & Roy": ["Magic", "Illusion"],
    "Christoph Langen": "Bobsleigh",
    "Michelle": "Music",  # Michelle (German singer)
    "Manfred von Ardenne": ["Physics", "Invention"],
    "Gottfried Wilhelm Leibniz": ["Philosophy", "Mathematics"],
    "Arthur Schopenhauer": "Philosophy",
    "Kurt Tucholsky": ["Journalism", "Literature"],
    "Karl and Theo Albrecht": "Entrepreneurship",
    "Pope Benedict XVI": ["Religion", "Pope", "Catholicism"],
    "Werner Heisenberg": "Physics",
    "Harald Juhnke": ["Comedy", "Performing Arts", "Music"],
    "Till Eulenspiegel": ["Folklore", "Character"],
    "Götz George": "Performing Arts",
    "Rudolf Diesel": ["Invention", "Engineering"],
    "Stefan Raab": ["Television", "Entrepreneurship", "Comedy"],
    "Hans Albers": ["Music", "Performing Arts"],
    "Nina Hagen": ["Music", "Performing Arts"],
    "Johannes Kepler": ["Astronomy", "Mathematics", "Philosophy"],
    "Hans Rosenthal": ["Radio", "Television"],
    "Rupert Neudeck": ["Medicine", "Journalism", "Humanitarianism"],
    "Dieter Hildebrandt": "Comedy",
    "Hans Söllner": "Music",
    "Gregor Gysi": "Politics",
    "Arminius": "Military",
    "Günter Grass": ["Literature", "Visual Arts"],
    "Inge Meysel": "Performing Arts",
    "Hans Hartz": "Music",
    "Karl Lagerfeld": ["Fashion", "Photography"],
    "Oliver Kahn": "Football",
    "Gerd Müller": "Football",
    "Ferdinand von Zeppelin": ["Industry", "Aviation", "Invention"],
    "Nicolaus Otto": ["Engineering", "Invention"],
    "Clara Zetkin": ["Politics", "Activism"],
    "Hannah Arendt": ["Journalism", "Philosophy", "History"],
    "Roman Herzog": ["Politics", "President"],
    "Hermann Oberth": ["Astronomy", "Physics"],
    "Karl Valentin": ["Comedy", "Performing Arts"],
    "Frank Schöbel": "Music",
    "Jakob Fugger": "Entrepreneurship",
    "Henry Maske": "Boxing",
    "Helmut Zacharias": "Music",
    "Michael Ballack": "Football",
    "Bernhard Grzimek": ["Zoology", "Animal Conservation", "Literature"],
    "Richard Strauss": ["Music", "Literature"],
    "Edmund Stoiber": "Politics",
    "Klaus Störtebeker": "Piracy",
    "Peter Frankenfeld": ["Comedy", "Radio", "Television"],
    "Mildred Scheel": ["Medicine", "Activism", "First Lady"],
    "Claudia Schiffer": ["Fashion", "Photography"],

    # Franceses
    "Charles De Gaulle": ["Politics", "Military", "President"],
    "Luís Pasteur": ["Biology", "Chemistry", "Medicine"], # Louis Pasteur
    "Abade Pierre": ["Religion", "Social Activism"], # Abbé Pierre
    "Marie Curie": ["Physics", "Chemistry"],
    "Coluche": ["Comedy", "Social Activism"],
    "Victor Hugo": ["Literature", "Politics"],
    "Bourvil": ["Comedy", "Performing Arts"],
    "Molière": ["Literature", "Performing Arts"],
    "Jacques Cousteau": ["Oceanography", "Exploration"],
    "Édith Piaf": "Music",
    "Marcel Pagnol": ["Literature", "Performing Arts"],
    "Georges Brassens": "Music",
    "Fernandel": "Comedy",
    "Jean de La Fontaine": "Literature",
    "Jules Verne": "Literature",
    "Napoleon": ["Politics", "Military"],
    "Louis de Funès": "Comedy",
    "Jean Gabin": "Performing Arts",
    "Daniel Balavoine": "Music",
    "Serge Gainsbourg": "Music",
    "Zinedine Zidane": "Football",
    "Carlos Magno": ["Royalty", "Politics"], # Charlemagne
    "Lino Ventura": "Performing Arts",
    "François Mitterrand": ["Politics", "President"],
    "Gustave Eiffel": "Engineering",
    "Émile Zola": "Literature",
    "Emmanuelle Cinquin": "Religion",
    "Jean Moulin": ["Politics", "Resistance"],
    "Charles Aznavour": "Music",
    "Yves Montand": ["Music", "Performing Arts"],
    "Joan of Arc": ["Religion", "Military"],
    "Philippe Leclerc de Hauteclocque": "Military",
    "Voltaire": ["Literature", "Philosophy"],
    "Johnny Hallyday": "Music",
    "Antoine de Saint-Exupéry": ["Literature", "Aviation"],
    "Claude François": "Music",
    "Christian Cabrol": "Medicine",
    "Jean-Paul Belmondo": "Performing Arts",
    "Jules Ferry": "Politics",
    "Louis Lumière": ["Invention", "Cinema"],
    "Michel Platini": "Football",
    "Jacques Chirac": ["Politics", "President"],
    "Charles Trenet": "Music",
    "Georges Pompidou": ["Politics", "President"],
    "Michel Sardou": "Music",
    "Simone Signoret": "Performing Arts",
    "Haroun Tazieff": ["Volcanology", "Geology"],
    "Jacques Prévert": ["Literature", "Poetry"],
    "Éric Tabarly": "Sailing",
    "Louis XIV": ["Royalty", "Politics"],
    "David Douillet": "Judo",
    "Henri Salvador": "Music",
    "Jean-Jacques Goldman": "Music",
    "Jean Jaurès": "Politics",
    "Jean Marais": "Performing Arts",
    "Yannick Noah": "Tennis",
    "Albert Camus": ["Literature", "Philosophy"],
    "Dalida": "Music",
    "Léon Zitrone": "Journalism",
    "Nicolas Hulot": ["Journalism", "Environmental Activism"],
    "Simone Veil": "Politics",
    "Alain Delon": "Performing Arts",
    "Patrick Poivre d'Arvor": "Journalism",
    "Aimé Jacquet": "Football",
    "Francis Cabrel": "Music",
    "Brigitte Bardot": ["Performing Arts", "Animal Activism"],
    "Guy de Maupassant": "Literature",
    "Alexandre Dumas": "Literature",
    "Honoré de Balzac": "Literature",
    "Paul Verlaine": "Literature",
    "Jean-Jacques Rousseau": ["Philosophy", "Literature"],
    "Maximilien Robespierre": "Politics",
    "Renaud": "Music",
    "Bernard Kouchner": ["Politics", "Medicine"],
    "Claude Monet": "Visual Arts",
    "Michel Serrault": "Performing Arts",
    "Pierre-Auguste Renoir": "Visual Arts",
    "Michel Drucker": "Television",
    "Raimu": "Performing Arts",
    "Vercingetorix": "Military",
    "Raymond Poulidor": "Cycling",
    "Charles Baudelaire": "Literature",
    "Pierre Corneille": "Literature",
    "Arthur Rimbaud": "Literature",
    "Georges Clemenceau": "Politics",
    "Gilbert Bécaud": "Music",
    "José Bové": "Activism",
    "Jean Ferrat": "Music",
    "Lionel Jospin": "Politics",
    "Jean Cocteau": ["Literature", "Visual Arts"],
    "Luc Besson": "Cinema",
    "Tino Rossi": "Music",
    "Pierre de Coubertin": "Sports",
    "Jean Renoir": "Cinema",
    "Gérard Philipe": "Performing Arts",
    "Jean-Paul Sartre": ["Philosophy", "Literature"],
    "Catherine Deneuve": "Performing Arts",
    "Serge Reggiani": ["Music", "Performing Arts"],
    "Gérard Depardieu": "Performing Arts",
    "Françoise Dolto": "Medicine",
    "René Descartes": ["Philosophy", "Mathematics"],
    "Blaise Pascal": ["Mathematics", "Philosophy"],

    # Americanos
    "Muhammad Ali": "Boxing",
    "Maya Angelou": ["Literature", "Activism"],
    "Susan B. Anthony": ["Activism", "Women's Rights"],
    "Lance Armstrong": "Cycling",
    "Neil Armstrong": "Astronautics",
    "Lucille Ball": ["Comedy", "Performing Arts"],
     # "Alexander Graham Bell": ["Invention", "Science"], (Linha comentada para eliminar duplicação da chave)
    "Barbara Bush": ["First Lady", "Activism"],
    "George H. W. Bush": ["Politics", "President"],
    "George W. Bush": ["Politics", "President"],
    "Laura Bush": ["First Lady", "Activism"],
    "Andrew Carnegie": ["Industry", "Philanthropy"],
    "Johnny Carson": "Television",
    "Jimmy Carter": ["Politics", "President"],
    "George Washington Carver": ["Botany", "Invention"],
    "Ray Charles": "Music",
    "Cesar Chavez": "Activism",
    "Bill Clinton": ["Politics", "President"],
    "Hillary Clinton": ["Politics", "Diplomacy"],
    "Bill Cosby": ["Comedy", "Performing Arts"],
    "Tom Cruise": "Performing Arts",
    "Ellen DeGeneres": ["Comedy", "Television"],
    "Walt Disney": ["Animation", "Cinema"],
    "Frederick Douglass": ["Activism", "Literature"],
    "Amelia Earhart": "Aviation",
    "Clint Eastwood": ["Performing Arts", "Cinema"],
    "Thomas Edison": ["Invention", "Science"],
    "John Edwards": "Politics",
    # "Albert Einstein": "Physics", (Linha comentada para eliminar duplicação da chave)
    "Dwight D. Eisenhower": ["Politics", "Military"],
    "Brett Favre": "American Football",
    "Henry Ford": ["Industry", "Invention"],
    "Benjamin Franklin": ["Politics", "Science"],
    "Bill Gates": ["Technology", "Philanthropy"],
    "Mel Gibson": ["Performing Arts", "Cinema"],
    "Rudy Giuliani": "Politics",
    "John Glenn": ["Astronautics", "Politics"],
    "Billy Graham": "Religion",
    "Alexander Hamilton": "Politics",
    "Tom Hanks": "Performing Arts",
    "Hugh Hefner": ["Advertising", "Entertainment"],
    "Katharine Hepburn": "Performing Arts",
    "Bob Hope": ["Comedy", "Performing Arts"],
    "Howard Hughes": ["Aviation", "Cinema"],
    "Michael Jackson": "Music",
    "Thomas Jefferson": ["Politics", "President"],
    "Steve Jobs": ["Technology", "Entrepreneurship"],
    "Lyndon B. Johnson": ["Politics", "President"],
    "Michael Jordan": "Basketball",
    "Helen Keller": ["Activism", "Literature"],
    "Jacqueline Kennedy Onassis": ["First Lady", "Fashion"],
    "John F. Kennedy": ["Politics", "President"],
    "Robert F. Kennedy": "Politics",
    "Martin Luther King Jr.": ["Activism", "Civil Rights"],
    "Rush Limbaugh": "Radio",
    "Abraham Lincoln": ["Politics", "President"],
    "Charles Lindbergh": "Aviation",
    "George Lucas": "Cinema",
    "Madonna": ["Music", "Performing Arts"],
    "Malcolm X": ["Activism", "Civil Rights"],
    "Phil McGraw": "Television",
    "Marilyn Monroe": ["Performing Arts", "Fashion"],
    "Michael Moore": "Cinema",
    "Audie Murphy": ["Military", "Performing Arts"],
    "Richard Nixon": ["Politics", "President"],
    "Barack Obama": ["Politics", "President"],
    "Jesse Owens": "Athletics",
    "Rosa Parks": ["Activism", "Civil Rights"],
    "George S. Patton": "Military",
    "Colin Powell": ["Politics", "Military"],
    "Elvis Presley": "Music",
    "Ronald Reagan": ["Politics", "President"],
    "Christopher Reeve": ["Performing Arts", "Activism"],
    "Condoleezza Rice": ["Politics", "Diplomacy"],
    "Jackie Robinson": "Baseball",
    "Eleanor Roosevelt": ["First Lady", "Activism"],
    "Franklin D. Roosevelt": ["Politics", "President"],
    "Theodore Roosevelt": ["Politics", "President"],
    "Babe Ruth": "Baseball",
    "Carl Sagan": ["Astronomy", "Science"],
    "Jonas Salk": "Medicine",
    "Arnold Schwarzenegger": ["Performing Arts", "Politics"],
    "Frank Sinatra": "Music",
    "Joseph Smith": "Religion",
    "Steven Spielberg": "Cinema",
    "James Stewart": "Performing Arts",
    "Martha Stewart": ["Entrepreneurship", "Television"],
    "Nikola Tesla": ["Invention", "Physics", "Engineering"],
    "Pat Tillman": ["American Football", "Military"],
    "Harry S. Truman": ["Politics", "President"],
    "Donald Trump": ["Politics", "President", "Entrepreneurship", "Television"],
    "Harriet Tubman": ["Activism", "Abolitionism"],
    "Mark Twain": "Literature",
    "Sam Walton": "Entrepreneurship",
    "George Washington": ["Politics", "President"],
    "John Wayne": "Performing Arts",
    "Oprah Winfrey": ["Television", "Philanthropy"],
    "Tiger Woods": "Golf",
    "Wright brothers": "Aviation",
    "Chuck Yeager": "Aviation",

    # Portugueses
    "António de Oliveira Salazar": ["Politics", "President", "Prime Minister"],
    "Álvaro Cunhal": "Politics",
    "Aristides de Sousa Mendes": "Diplomacy",
    "Afonso I of Portugal": ["Royalty", "Politics"],
    "Luís de Camões": "Literature",
    "John II of Portugal": ["Royalty", "Politics"],
    "Prince Henry the Navigator": "Exploration",
    "Fernando Pessoa": "Literature",
    "Sebastião José de Carvalho e Melo, 1st Marquis of Pombal": "Politics",
    "Vasco da Gama": "Exploration",
    "Salgueiro Maia": "Military",
    "Mário Soares": "Politics",
    "Anthony of Padua": "Religion",
    "Amália Rodrigues": "Music",
    "Eusébio": "Football",
    "Francisco Sá Carneiro": "Politics",
    "Jorge Nuno Pinto da Costa": "Football", # Presidente do FC Porto
    "Nuno Álvares Pereira": "Military",
    "João Ferreira de Almeida": "Religion",
    "José Mourinho": "Football",
    "Agostinho da Silva": ["Philosophy", "Literature"],
    "Eça de Queiroz": "Literature",
    "António Egas Moniz": "Medicine",
    "Denis of Portugal": ["Royalty", "Politics"],
    "Fernando Nobre": "Medicine",
    "José Hermano Saraiva": "History",
    "Aníbal Cavaco Silva": "Politics",
    "Humberto Delgado": "Military",
    "José Afonso": "Music",
    "Luís Figo": "Football",
    "Marcelo Caetano": "Politics",
    "Pedro Nunes": ["Mathematics", "Astronomy"],
    "António Vieira": ["Religion", "Literature"],
    "Florbela Espanca": "Literature",
    "Ferdinand Magellan": "Exploration", # Fernão de Magalhães
    "Maria de Lourdes Pintasilgo": "Politics",
    "John I of Portugal": ["Royalty", "Politics"],
    "Sophia de Mello Breyner Andresen": "Literature",
    "Antonia Ferreira": "Entrepreneurship",
    "Antonio Damasio": "Neuroscience",
    "Afonso de Albuquerque": "Military",
    "Manuel I of Portugal": ["Royalty", "Politics"],
    "José Saramago": "Literature",
    "Elizabeth of Portugal": "Religion",
    "Catarina Eufémia": "Activism",
    "Carlos Paredes": "Music",
    "José Sócrates": "Politics",
    "Pedro Álvares Cabral": "Exploration",
    "Ruy de Carvalho": "Performing Arts",
    "Brites de Almeida, The Baker of Aljubarrota": "History", # Padeira de Aljubarrota
    "Alberto João Jardim": "Politics",
    "Almada Negreiros": ["Literature", "Visual Arts"],
    "Vasco Gonçalves": "Military",
    "Álvaro Siza Vieira": "Architecture",
    "Belmiro de Azevedo": "Entrepreneurship",
    "José Tomás de Sousa Martins": "Medicine",
    "Maria do Carmo Seabra": "Medicine",
    "Carlos I of Portugal": ["Royalty", "Politics"],
    "Mariza": "Music",
    "Eleanor of Portugal": ["Royalty", "Politics"],
    "Rosa Mota": "Athletics",
    "Afonso III of Portugal": ["Royalty", "Politics"],
    "Vítor Baía": "Football",
    "Bartolomeu Dias": "Exploration",
    "Otelo Saraiva de Carvalho": "Military",
    "Cristiano Ronaldo": "Football",
    "Herman José": ["Comedy", "Television"],
    "Maria II of Portugal": ["Royalty", "Politics"],
    "Carlos Lopes": "Athletics",
    "Afonso Costa": "Politics",
    "Fontes Pereira de Melo": "Politics",
    "Gago Coutinho": ["Aviation", "Exploration"],
    "Ricardo Araújo Pereira": "Comedy",
    "Bocage": "Literature",
    "Hélio Pestana": "Motorsport",
    "Jorge Sampaio": "Politics",
    "António Champalimaud": "Entrepreneurship",
    "António Lobo Antunes": "Literature",
    "Gil Vicente": "Literature",
    "Maria Helena Vieira da Silva": "Visual Arts",
    "Miguel Torga": "Literature",
    "Natália Correia": "Literature",
    "Edgar Cardoso": "Engineering",
    "Fernão Mendes Pinto": "Exploration",
    "Sister Lúcia": "Religion",
    "Pope John XXI": ["Religion", "Pope"],
    "Damião de Góis": ["Philosophy", "History"],
    "John IV of Portugal": ["Royalty", "Politics"],
    "Joaquim Agostinho": "Cycling",
    "Adelaide Cabete": ["Medicine", "Activism"],
    "Almeida Garrett": "Literature",
    "António Variações": "Music",
    "Paula Rego": "Visual Arts",
    "Maria João Pires": "Music",

    # Argentinos
    "José de San Martín": ["Military", "Politics", "Independence"],
    "René Favaloro": ["Medicine", "Surgery"],
    "Juan Manuel Fangio": "Motorsport",
    "Alberto Olmedo": ["Comedy", "Television"],
    "Che Guevara": ["Revolutionary", "Politics", "Medicine"],
    "Diego Maradona": "Football",
    "Eva Perón": ["Politics", "Activism"],
    "Jorge Luis Borges": ["Literature", "Philosophy"],
    "Manuel Belgrano": ["Military", "Politics", "Independence"],
    "Roberto Fontanarrosa": ["Literature", "Humor"],
    "Adolfo Bioy Casares": "Literature",
    "Adolfo Pérez Esquivel": ["Activism", "Human Rights"],
    "Alfonsina Storni": "Literature",
    "Alfredo Alcón": "Performing Arts",
    "Alfredo Di Stéfano": "Football",
    "Alfredo Palacios": "Politics",
    "Alicia Moreau de Justo": ["Medicine", "Activism"],
    "Ángel Vicente Peñaloza": "Politics",
    "Antonio Berni": "Visual Arts",
    "Arturo Frondizi": "Politics",
    "Arturo Umberto Illia": "Politics",
    "Astor Piazzolla": "Music",
    "Atahualpa Yupanqui": "Music",
    "Bartolomé Mitre": ["Politics", "History", "Journalism"],
    "Benito Quinquela Martín": "Visual Arts",
    "Bernardino Rivadavia": "Politics",
    "Bernardo Houssay": ["Medicine", "Physiology"],
    "Calfucurá": "Politics",
    "Carlos Bilardo": "Football",
    "Carlos Gardel": "Music",
    "Carlos Menem": "Politics",
    "Carlos Monzón": "Boxing",
    "Carlos Mugica": "Religion",
    "Carlos Reutemann": "Motorsport",
    "Charly García": "Music",
    "César Luis Menotti": "Football",
    "César Milstein": ["Biology", "Immunology"],
    "Daniel Passarella": "Football",
    "Domingo Faustino Sarmiento": ["Politics", "Education", "Literature"],
    "Enrique Angelelli": "Religion",
    "Enrique Santos Discépolo": ["Music", "Literature"],
    "Ernesto Sabato": "Literature",
    "Esteban Echeverría": "Literature",
    "Estela de Carlotto": ["Activism", "Human Rights"],
    "Facundo Quiroga": ["Military", "Politics"],
    "Florentino Ameghino": ["Paleontology", "Anthropology"],
    "Francisco Moreno": ["Exploration", "Geography"],
    "Gabriel Batistuta": "Football",
    "Gabriela Sabatini": "Tennis",
    "Guillermo Vilas": "Tennis",
    "Gustavo Santaolalla": "Music",
    "Hebe de Bonafini": ["Activism", "Human Rights"],
    "Hipólito Yrigoyen": "Politics",
    "Hugo Porta": "Rugby",
    "Jorge Newbery": "Aviation",
    "José Hernández": "Literature", # José Hernández (writer) (1834–1886), Argentine writer
    "José María Gatica": "Boxing",
    "Juan Bautista Alberdi": ["Politics", "Law"],
    "Juan José Castelli": ["Politics", "Law"],
    "Juan Manuel de Rosas": "Politics",
    "Juan Perón": "Politics",
    "Juana Azurduy de Padilla": ["Military", "Independence"],
    "Julio Argentino Roca": "Politics",
    "Julio Bocca": "Ballet",
    "Julio Cortázar": "Literature",
    "Justo José de Urquiza": "Politics",
    "Leandro N. Alem": "Politics",
    "León Gieco": "Music",
    "Lisandro de la Torre": "Politics",
    "Lola Mora": "Visual Arts",
    "Luciana Aymar": "Field Hockey",
    "Luis Federico Leloir": ["Biology", "Chemistry"],
    "Luis Sandrini": "Performing Arts",
    "Manu Ginóbili": "Basketball",
    "Manuel Dorrego": "Politics",
    "Mariano Moreno": ["Politics", "Journalism"],
    "Mariano Mores": "Music",
    "Mario Kempes": "Football",
    "Mariquita Sánchez": ["Politics", "Activism"],
    "Martín Miguel de Güemes": ["Military", "Independence"],
    "María Elena Walsh": ["Literature", "Music"],
    "Mercedes Sosa": "Music",
    "Nicolino Locche": "Boxing",
    "Niní Marshall": ["Comedy", "Performing Arts"],
    "Norma Aleandro": "Performing Arts",
    "Néstor Kirchner": "Politics",
    "Oscar Bonavena": "Boxing",
    "Quino": ["Humor", "Literature"],
    "Ramón Carrillo": "Medicine",
    "Raúl Alfonsín": "Politics",
    "Ricardo Balbín": "Politics",
    "Roberto Arlt": "Literature",
    "Roberto De Vicenzo": "Golf",
    "Rodolfo Walsh": ["Journalism", "Literature"],
    "Roque Sáenz Peña": "Politics",
    "Salvador Mazza": "Medicine",
    "Sandro de América": "Music",
    "Tato Bores": "Comedy",
    "Tita Merello": ["Performing Arts", "Music"],
    "Xul Solar": ["Visual Arts", "Literature"],

    # Italianos
    "Lucio Battisti": "Music",
    "Roberto Benigni": ["Performing Arts", "Cinema"],
    "Mike Bongiorno": "Television",
    "Caravaggio": "Fine Arts",
    "Giosuè Carducci": "Literature",
    "Christopher Columbus": "Exploration",
    "Fausto Coppi": "Cycling",
    "Dante Alighieri": "Literature",
    "Leonardo da Vinci": ["Fine Arts", "Invention", "Engineering", "Literature", "Mathematics", "Biology", "Architecture", "Music", "Physics"],
    "Eduardo De Filippo": ["Performing Arts", "Literature"],
    "Vittorio De Sica": "Cinema",
    "Falcone": "Justice", # Giovanni Falcone
    "Borsellino": "Justice", # Paolo Borsellino
    "Federico Fellini": "Cinema",
    "Enrico Fermi": "Physics",
    "Chiara Ferragni": ["Fashion", "Entrepreneurship"],
    "Enzo Ferrari": "Automobilism",
    "Rosario Fiorello": ["Comedy", "Television"],
    "Galileo Galilei": ["Astronomy", "Physics"],
    "Giuseppe Garibaldi": ["Politics", "Military"],
    "Vittorio Gassman": "Performing Arts",
    "Giotto": "Fine Arts", # Giotto di Bondone
    "Giacomo Leopardi": "Literature",
    "Rita Levi-Montalcini": ["Neurology", "Science"],
    "Sophia Loren": "Performing Arts",
    "Anna Magnani": "Performing Arts",
    "Nino Manfredi": ["Performing Arts", "Cinema"],
    "Alessandro Manzoni": "Literature",
    "Guglielmo Marconi": ["Invention", "Physics"],
    "Marcello Mastroianni": "Performing Arts",
    "Giuseppe Mazzini": "Politics",
    "Michelangelo": ["Fine Arts", "Architecture"],
    "Mina": "Music", # Mina Mazzini
    "Aldo Moro": "Politics",
    "Giovanni Pascoli": "Literature",
    "Laura Pausini": "Music",
    "Luciano Pavarotti": "Music",
    "Sandro Pertini": "Politics",
    "Petrarch": "Literature", # Francesco Petrarca
    "Luigi Pirandello": ["Literature", "Performing Arts"],
    "Marco Polo": ["Exploration", "Navigation"],
    "Giacomo Puccini": "Music",
    "Valentino Rossi": "Motorcycling",
    "Alberto Sordi": ["Performing Arts", "Cinema"],
    "Totò": ["Performing Arts", "Cinema"], # Totò (Antonio De Curtis)
    "Massimo Troisi": ["Performing Arts", "Cinema"],
    "Giuseppe Verdi": "Music",
    "Alessandro Volta": "Physics",

    # Brasileiros
    "Ayrton Senna": "Automobilism",
    "Chico Xavier": ["Spiritism", "Literature", "Religion", "Philanthropy"],
    "Fernando Henrique Cardoso": ["Politics", "Sociology", "President"],
    "Getúlio Vargas": ["Politics", "President", "Laborism"],
    "Irmã Dulce": ["Religion", "Philanthropy", "Catholicism"],
    "Juscelino Kubitschek": ["Politics", "President"],
    "Luiz Inácio Lula da Silva": ["Politics", "President", "Unionism"],
    "Oscar Niemeyer": ["Architecture", "Urbanism"],
    "Pelé": "Football",
    "Isabel, Princess Imperial of Brazil": ["Royalty", "Politics", "Abolition"],
    "Alberto Santos-Dumont": ["Aviation", "Invention", "Engineering"],
    "Tiradentes": ["Independence", "Military", "Activism"],
    "Edir Macedo": ["Religion", "Entrepreneurship", "Television"],
    "Chico Anysio": ["Comedy", "Television", "Radio"],
    "Ronaldo (Brazilian footballer)": ["Football", "Entrepreneurship"],
    "Dercy Gonçalves": ["Comedy", "Performing Arts", "Television"],
    "Zilda Arns": ["Medicine", "Philanthropy", "Activism", "Public Health"],
    "Roberto Carlos (singer)": ["Music", "Television"],
    "José Alencar": ["Politics", "Entrepreneurship", "Vice President", "Industry"],
    "Neymar": ["Football", "Entrepreneurship", "Philanthropy"],
    "Eike Batista": "Entrepreneurship",
    "Ruy Barbosa": ["Politics", "Law", "Literature", "Diplomacy"],
    "Frei Galvão": ["Religion", "Catholicism"],
    "Manoel Jacintho Coelho": ["Religion", "Rational Culture", "Military"],
    "Oswaldo Cruz": ["Medicine", "Public Health", "Biology"],
    "Silas Malafaia": ["Religion", "Television", "Protestantism"],
    "Pedro II of Brazil": ["Royalty", "Politics", "Culture", "Brazilian History", "Abolitionism"],
    "Chico Mendes": ["Environmentalism", "Activism", "Politics", "Unionism"],
    "Luiz Gonzaga": "Music",
    "Renato Russo": "Music",
    "Herbert de Souza": ["Philanthropy", "Activism", "Sociology"],
    "Padre Cícero": ["Religion", "Charity", "Catholicism", "Politics"],
    "Dilma Rousseff": ["Politics", "Economy", "President", "Activism"],
    "Tancredo Neves": ["Politics", "President", "Prime Minister"],
    "Luciano Huck": ["Television", "Entrepreneurship", "Philanthropy"],
    "Valdemiro Santiago": ["Religion", "Entrepreneurship", "Protestantism", "Television"],
    "Hélder Câmara": ["Religion", "Activism", "Catholicism", "Literature"],
    "Renato Aragão": ["Comedy", "Television", "Performing Arts", "Activism"],
    "Rodrigo Faro": ["Television", "Performing Arts", "Fashion"],
    "Xuxa": ["Television", "Music", "Performing Arts", "Fashion", "Entrepreneurship"],
    "Machado de Assis": ["Literature", "Journalism"],
    "Luan Santana": ["Music", "Television"],
    "Ivete Sangalo": ["Music", "Television"],
    "Elis Regina": "Music",
    "Irineu Evangelista de Sousa, Viscount of Mauá": ["Industry", "Entrepreneurship", "Politics", "Innovation"],
    "Raul Seixas": "Music",
    "Leonel Brizola": ["Politics", "Laborism"],
    "Tiririca": ["Comedy", "Politics", "Music", "Television"],
    "Gugu Liberato": ["Television", "Entrepreneurship"],
    "Rogério Ceni": "Football",
    "Carlos Drummond de Andrade": ["Literature", "Journalism"],
    "Zumbi": ["Politics", "Resistance", "Quilombola Leadership"],
    "R.R. Soares": ["Religion", "Television", "Entrepreneurship", "Protestantism"],
    "Paulo Freire": ["Education", "Pedagogy", "Philosophy"],
    "Hebe Camargo": ["Television", "Radio", "Comedy", "Performing Arts"],
    "Monteiro Lobato": ["Literature", "Journalism", "Entrepreneurship", "Law", "Activism"],
    "Roberto Marinho": ["Television", "Entrepreneurship", "Journalism"],
    "Marcos (footballer, born 1973)": "Football",
    "Marcelo Rossi": ["Religion", "Music", "Television", "Catholicism"],
    "Zico (footballer)": ["Football", "Philanthropy"],
    "Amácio Mazzaropi": ["Performing Arts", "Comedy", "Music"],
    "Dedé (footballer, born 1988)": "Football",
    "Ulysses Guimarães": ["Politics", "Law", "Activism"],
    "Reynaldo Gianecchini": ["Television", "Performing Arts", "Fashion"],
    "Carlos Chagas": ["Medicine", "Public Health", "Biology"],
    "Jonas Abib": ["Religion", "Music", "Catholicism"],
    "Luís Alves de Lima e Silva, Duke of Caxias": ["Military", "Politics", "Prime Minister"],
    "Antônio Ermírio de Moraes": ["Entrepreneurship", "Industry", "Philanthropy", "Engineering"],
    "Cândido Rondon": ["Exploration", "Indigenism", "Military", "Engineering"],
    "Lua Blanco": ["Music", "Television", "Performing Arts", "Literature", "Philanthropy"],
    "Michel Teló": "Music",
    "Garrincha": "Football",
    "Lampião": ["Cangaço", "Folklore"],
    "Claudia Leitte": ["Music", "Television", "Entrepreneurship"],
    "Luís Carlos Prestes": ["Politics", "Activism", "Military"],
    "Marcos Pontes": ["Astronautics", "Military", "Astronomy", "Space Exploration", "Engineering", "Politics"],
    "Fernando Collor de Mello": ["Politics", "President", "Economy"],
    "José Serra": ["Politics", "Economy", "Engineering", "Diplomacy", "Public Health"],
    "Sócrates": ["Football", "Activism", "Medicine"],
    "Datena": ["Television", "Journalism", "Politics"],
    "Ronaldinho": "Football",
    "Joelma (singer)": ["Music", "Dance", "Entrepreneurship"],
    "Chico Buarque": ["Music", "Literature", "Performing Arts", "Activism"],
    "Chacrinha": ["Television", "Radio"],
    "Amado Batista": ["Music", "Entrepreneurship"],
    "William Bonner (newscaster)": ["Journalism", "Television"],
    "Cazuza": "Music",
    "Antônio Carlos Jobim": ["Music", "Internationalization"],
    "Anderson Silva": ["Martial Arts", "Boxing"],
    "Roberto Landell de Moura": ["Religion", "Invention", "Catholicism", "Radio"],
    "Romário": ["Football", "Politics"],
    "Jorge Amado": ["Literature", "Journalism", "Politics"],
    "Ronald Golias": ["Television", "Performing Arts", "Comedy"],
    "Itamar Franco": ["Politics", "President", "Vice President", "Engineering"],
    "Roberto Justus": ["Entrepreneurship", "Television", "Advertising"],
    "Ana Paula Valadão": ["Religion", "Music", "Protestantism", "Literature", "Television"],
    "Vital Brazil": ["Medicine", "Research", "Public Health", "Biology"],
    "Jô Soares": ["Television", "Comedy", "Interviews", "Performing Arts", "Literature", "Music", "Fine Arts"],
    "Maria da Penha": ["Women's Rights", "Feminism", "Activism", "Human Rights"]
}


len(area_mapping)

# Relacionar os textos carregados às suas áreas definidas no dicionário `area_mapping`.

def estabelecer_relacao(page_titles, textos, area_mapping):

    relacao_textos = {}

    for i, titulo in enumerate(page_titles):
        if i < len(textos):  # Verifica se existe um texto correspondente
            texto = textos[i]
            area = area_mapping.get(titulo, "Área desconhecida")  # Busca a área no dicionário
            relacao_textos[titulo] = {
                "texto": texto,
                "area": area
            }
        else:
            print(f"Texto para '{titulo}' não encontrado.")

    return relacao_textos

# Estabelecendo a relação
relacao_textos = estabelecer_relacao(page_titles, textos, area_mapping)

# Exemplo: verificar uma relação específica
for titulo, conteudo in relacao_textos.items():
    print(f"Título: {titulo}")
    print(f"Área: {conteudo['area']}")
    print(f"Texto: {conteudo['texto'][:100]}...\n")  # Exibe os primeiros 100 caracteres do texto
    break  # Digite break ao lado para mostrar um exemplo, apenas. Retire-o para ver todas as relações.

# Gerador da lista de rótulos atribuídos às páginas

todos_os_rotulos = []
for rotulos in area_mapping.values():
    if isinstance(rotulos, list):
        todos_os_rotulos.extend(rotulos)
    else:
        todos_os_rotulos.append(rotulos)

rotulos_unicos = list(set(todos_os_rotulos))
print(rotulos_unicos)

# Lista de rótulos atribuídos às páginas

page_labels = [

     'Geology', 'Boxing', 'Animation', 'Paleontology', 'Medicine',
     'Baseball', 'Fine Arts', 'Justice', 'Environmentalism', 'Motorcycling',
     'Animal Conservation', 'Philosophy', 'Industry', 'Surgery', 'Automobilism',
     'Bobsleigh', 'Rowing', 'American Football', 'Indigenism', 'Judo',
     'Abolitionism', 'Ski Jumping', 'Football', 'Optics', 'Laborism', 'Economics',
     'Physiology', 'Unionism', 'Geography', 'Golf', 'Sailing', 'Martial Arts',
     'Culture', "Women's Rights", 'Cycling', 'Education', 'Piracy', 'Economy',
     'Urbanism', 'Rational Culture', 'Anthropology', 'Astronomy', 'Literature',
     'Mathematics', 'Visual Arts', 'Legend', 'Activism', 'Linguistics',
     'Motorsport', 'Military', 'Royalty', 'Protestantism', 'Revolutionary',
     'President', 'Volcanology', 'Cinema', 'Animal Activism', 'Environmental Activism',
     'Interviews', 'Cangaço', 'Diplomacy', 'Chancellor', 'Prime Minister',
     'Field Hockey', 'Humor', 'Engineering', 'Commerce', 'Sports', 'Neuroscience',
     'Zoology', 'Psychoanalysis', 'Biology', 'Botany', 'Vice-Chancellor',
     'Athletics', 'Brazilian History', 'Pedagogy', 'Dance', 'Social Activism',
     'Physics', 'Speed', 'Astronautics', 'Space Exploration', 'Character',
     'Illusion', 'Feminism', 'Chemistry', 'Nursing', 'Independence', 'Comedy',
     'Folklore', 'Ballet', 'Quilombola Leadership', 'Radio', 'Resistance',
     'Neurology', 'Sociology', 'Politics', 'Aviation', 'Tennis', 'German Reconstruction',
     'Science', 'Swimming', 'Oceanography', 'Immunology', 'Navigation', 'Vice President',
     'Humanitarianism', 'Photography', 'Occultism', 'Public Health',
     'Internationalization', 'Entertainment', 'Basketball', 'Civil Rights', 'Abolition',
     'Innovation', 'Magic', 'Exploration', 'Philanthropy', 'Catholicism', 'Figure Skating',
     'Human Rights', 'First Lady', 'Rugby', 'Pope', 'Law', 'Technology', 'Fashion',
     'Computer Science', 'Music', 'Architecture', 'Charity', 'Invention', 'Television',
     'Chess', 'Journalism', 'Poetry', 'Religion', 'Theology', 'Entrepreneurship',
     'Research', 'History', 'Advertising', 'Spiritism', 'Performing Arts'

    ]

len (page_labels)

# Verifica se há nomes na lista page_titles que estão faltantes no dicionário.
# Se na resposta aparece [] , a lista vazia, não faltam nomes.

missing_names = list(set(page_titles) - set(area_mapping.keys()))
print(f"Os seguintes nomes estão faltando no dicionário area_mapping: {missing_names}")

# Verifica se há rótulos na lista page_labels que estão faltantes no dicionário.
# Se na resposta aparece [] , a lista vazia, não faltam rótulos.

all_labels_in_mapping = []
for labels in area_mapping.values():
    if isinstance(labels, list):
        all_labels_in_mapping.extend(labels)
    else:
        all_labels_in_mapping.append(labels)

unique_labels_in_mapping = set(all_labels_in_mapping)

missing_labels = list(set(page_labels) - unique_labels_in_mapping)

print(f"Os seguintes rótulos estão faltando no dicionário area_mapping: {missing_labels}")

# O código desse bloco se trata de um modelo não supervisionado.
# Não é o que foi proposto para o projeto, mas está aqui para fins de curiosidade e comparação.
# Caso seja utilizado esse modelo diretamente para encontrar a biografia mais similar a outra,
# todos os textos presente no arquivo serão avaliados integralmente, dificultando o processamento.

import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
import string
import dropbox

# Função para pré-processar os textos
def preprocessar_texto(texto):
    texto = texto.lower()  # Converter para minúsculas
    texto = texto.translate(str.maketrans('', '', string.punctuation))  # Remover pontuação
    palavras = texto.split()
    palavras = [palavra for palavra in palavras if palavra not in stopwords.words('portuguese')]  # Remover stopwords
    return ' '.join(palavras)

# Função para comparar o novo texto com a base de textos
def comparar_novo_texto_dropbox(novo_texto_titulo, caminho_dropbox):
    """
    Compara o novo texto extraído da Wikipedia com os textos base carregados do Dropbox.
    """
    # Obter conteúdo do novo texto (substitua com a função de extração real)
    novo_texto = "Texto de exemplo da biografia para Silvio Santos..."  # Exemplo
    print(f"Recuperando conteúdo da Wikipedia para o título: {novo_texto_titulo}")

    # Pré-processar o novo texto
    novo_texto_processado = preprocessar_texto(novo_texto)

    # Pré-processar os textos base
    textos_processados = [preprocessar_texto(texto) for texto in textos]

    # Vetorização com TF-IDF
    vectorizer = TfidfVectorizer()
    textos_completos = textos_processados + [novo_texto_processado]
    tfidf_matrix = vectorizer.fit_transform(textos_completos)

    # Cálculo da similaridade de cosseno
    similaridades = cosine_similarity(tfidf_matrix[-1], tfidf_matrix[:-1])  # Similaridade entre novo texto e base

    # Identificar a biografia mais similar
    indice_max_similaridade = np.argmax(similaridades)
    nome_biografia_similar = textos[indice_max_similaridade]

    # Exibir o resultado
    print(f"O texto mais similar é o de: {nome_biografia_similar}")

# Exemplo de uso
novo_texto_titulo = "Silvio Santos"  # Substituir pelo título desejado
caminho_dropbox = '/wikipedia-api-biografias'  # Substituir pelo caminho correto do diretório no Dropbox
comparar_novo_texto_dropbox(novo_texto_titulo, caminho_dropbox)

# Aprendizado Supervisionado - Treinamento

import pickle
from transformers import AutoTokenizer, AutoModel
import torch

# Carregar o modelo pré-treinado para embeddings
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
model = AutoModel.from_pretrained("distilbert-base-uncased")

# Função para obter o embedding de um texto
def get_embedding(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    embedding = outputs.last_hidden_state.mean(dim=1).squeeze().numpy()  # Média dos embeddings das palavras
    return embedding

# Preparar os embeddings e rótulos
embeddings = []
labels = []

for title, data in relacao_textos.items():
    embeddings.append(get_embedding(data['texto']))
    labels.append(data['area'])

# Converter a lista de embeddings para array numpy para facilitar o cálculo posterior
embeddings = torch.stack([torch.tensor(embedding) for embedding in embeddings]).numpy()

# Salvar os embeddings e rótulos em um arquivo (para não recalcular a cada execução)
with open('embeddings.pkl', 'wb') as f:
    pickle.dump((embeddings, labels), f)

import requests

def get_new_wikipedia_page_content(new_page_title):
    """
    Extrai o conteúdo da nova página da Wikipédia pelo título da página.
    """
    url = "https://en.wikipedia.org/w/api.php"

    params = {
        'action': 'query',
        'format': 'json',
        'prop': 'extracts',
        'explaintext': True,
        'titles': new_page_title
    }

    response = requests.get(url, params=params)

    if response.status_code == 200:
        data = response.json()
        page = next(iter(data['query']['pages'].values()))
        content = page.get('extract', 'No content found')
        return content
    else:
        print(f"Erro ao acessar a API da Wikipedia para '{new_page_title}'. Status code: {response.status_code}")
        return None

# Aprendizado Supervisionado - Teste

import pickle
from sklearn.metrics.pairwise import cosine_similarity
from transformers import AutoTokenizer, AutoModel
import torch

# Se for executar diretamente esse teste e estiver usando Colab,
# siga essas instruções para abrir embeddings.pkl:
# Clique no ícone da pasta na barra lateral esquerda do Colab.
# Clique no botão "Upload" que aparece.
# Selecione o arquivo embeddings.pkl do seu computador.
# Clique em "Abrir".

# Carregar os embeddings e rótulos previamente salvos
with open('embeddings.pkl', 'rb') as f:
    embeddings, labels = pickle.load(f)

# Carregar o modelo pré-treinado para embeddings
tokenizer = AutoTokenizer.from_pretrained("distilbert-base-uncased")
model = AutoModel.from_pretrained("distilbert-base-uncased")

# Função para obter o embedding do novo texto
def get_embedding(new_text):
    inputs = tokenizer(new_text, return_tensors="pt", padding=True, truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)
    embedding = outputs.last_hidden_state.mean(dim=1).squeeze().numpy()  # Média dos embeddings das palavras
    return embedding

# Título do texto
new_page_title = input("Digite o título da página da Wikipédia: ")

# Novo texto para sugerir rótulo
new_text = get_new_wikipedia_page_content(new_page_title)

if new_text:
    # Obter o embedding do novo texto
    new_embedding = get_embedding(new_text)

    # Calcular similaridade entre o novo texto e os textos existentes
    similarities = cosine_similarity([new_embedding], embeddings)

    # Encontrar o índice do texto mais similar
    most_similar_index = similarities.argmax()

    # Sugerir o rótulo correspondente
    suggested_label = labels[most_similar_index]
    print(f"Sugestão de rótulo: {suggested_label}")
    print(f"Similaridade com o rótulo sugerido: {suggested_similarity:.2f}")
else:
    print("Não foi possível recuperar o conteúdo da página.")

# Às vezes pode ser necessário rodar duas vezes para atualizar

!pip install plotly
import plotly.express as px # import the plotly express module and assign it to px

# Criar gráfico de similaridade
top_indices = similarities.argsort()[0][-10:][::-1]  # Top 10 índices mais similares
top_labels = [labels[i] for i in top_indices]
top_similarities = [similarities[0, i] for i in top_indices]

# Destacar o rótulo atribuído
colors = ['#636EFA' if label != suggested_label else '#EF553B' for label in top_labels]

fig = px.bar(
    x=top_labels,
    y=top_similarities,
    labels={'x': 'Rótulos', 'y': 'Similaridade'},
    title=f'Similaridade entre o Texto e os Rótulos (Texto: {new_page_title})',
    color_discrete_sequence=colors
)

fig.update_layout(
    xaxis=dict(title='Rótulos', tickangle=45),
    yaxis=dict(title='Similaridade'),
    showlegend=False
)

# Exibir o gráfico
fig.show()
